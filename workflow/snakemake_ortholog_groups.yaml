###################
# LIBRARIES
###################
import pandas as pd
import glob

##############
# CONFIG
##############

configfile: "../config/config.yaml"

#############
# FILES
############

#-------------------------------------------------------
#starting fasta file
#-------------------------------------------------------
initial_fasta_file_name = config['input_files']['all_sequence_fasta'].split('/')[-1]
print('Fasta file:\n' ,initial_fasta_file_name, '\n')
#-------------------------------------------------------




#-------------------------------------------------------
# model organisms  
#-------------------------------------------------------
model_organisms_files = glob.glob('genome_data_sets/subject_proteomes/pdb_files/model_organisms_files/*')
model_organisms_files_final = [file.split('/')[-1] for file in model_organisms_files]

#individual org db files
model_organisms_files_final_db = [file.split('/')[-1][:-4] for file in model_organisms_files]


print('This are the model organisms files provided:')
for file in model_organisms_files:
    print(file.split('/')[-1] )
    
#-------------------------------------------------------
    
    
    

#-------------------------------------------------------
#creating path to control data download
#-------------------------------------------------------
df_UNIPROT = pd.read_csv('../config/mandatory_files/fasta_header_to_uniprot.tsv', sep='\t', header=None, names=['GeneID', 'UNIPROT'])
pdb_files = [f'AF-{UNIPROTaccession}-F1-model_v4.pdb' for UNIPROTaccession in df_UNIPROT.UNIPROT.unique()]

#full path
pdb_files_full_path = expand('genome_data_sets/query_proteomes/pdb_files/prot_structure_download_from_AlphaFoldDB/{pdb_files}', pdb_files = pdb_files)
#-------------------------------------------------------



# name="some/file.txt" if config["condition"] else "other/file.txt"

#print('protein_sequences_from_cluster_wo_structure_in_AFDB.fasta' if config['fasta_file_of_non_modelated_clusters']['create_fasta_file'] else 'config/mandatory_files/fasta_header_to_uniprot.tsv')
optional_file = 'protein_sequences_from_cluster_wo_structure_in_AFDB.fasta' if config['fasta_file_of_non_modelated_clusters']['create_fasta_file'] else '../config/mandatory_files/fasta_header_to_uniprot.tsv'


rule all: 
  input: expand('../results/reciprocal_best_hit_TSV/cluster_representer_vs_{organisms}.tsv', organisms = model_organisms_files_final_db),
    '../results/foldseek_search_TSV/cluster_representer_vs_SwissProt.tsv' #
    #'genome_data_sets/query_proteomes/foldseek_data_base/DB_cluster_representer' #
    #expand('../results/reciprocal_best_hit/cluster_representer_vs_{organisms}', organisms = model_organisms_files_final_db)
    #expand( '../results/reciprocal_best_hit_TSV/cluster_representer_vs_{organisms}.tsv'  , organisms = model_organisms_files_final_db) #,
    #'../results/foldseek_search_TSV/cluster_representer_vs_SwissProt.tsv'
    #expand('../results/reciprocal_best_hit/cluster_representer_vs_{organisms}', organisms = [file[:-4] for file in model_organisms_files_final]),
    #'../results/foldseek_search/cluster_representer_vs_SwissProt.index',
    #'../results/foldseek_search_TSV/cluster_representer_vs_SwissProt.tsv',
    #'../results/Gene_annotation_info_from_uniprot_model_spp.tsv'
    #expand('genome_data_sets/subject_proteomes/annotation_info/{organisms}.tsv', organisms = [file[:-4] for file in model_organisms_files_final])
    #optional_file,
    #'genome_data_sets/subject_proteomes/foldseek_data_base/all_org_DB/all_model_organisms_DB'
    
    
    
 
#    expand('genome_data_sets/subject_proteomes/foldseek_data_base/individual_org_DB/{organisms}', organisms = [file[:-4] for file in model_organisms_files_final]),
#    'report/ortholog_groups_structure_stats.tsv',   
  
####################################################
#
#
# Obtaining all availbale structure data
#
#
####################################################

#################
# DOWNLOADING FROM ALPHA FOLD DB
#################

rule download_structure_files_from_alphafold_DB:
  input:
    config['input_files']['header_to_uniprot']
  output: 
    #pdb_files_full_path, #esto es necesario despues descomentar
    touch('tmp/download_finished.out')
  retries: 
    config['downloading_from_AFDB']['retries']
  threads:
    config['downloading_from_AFDB']['threads']
  conda:
    'envs/env_nameconverter_and_AFDBdownload.yaml'
  script:
    'scripts/1_download_prot_struct_from_AFDB.py'
    

#############################################################################################
# CALCULATION OF pLDDT MEAN to use as filter to select representitative structure in cluster
#############################################################################################

rule pLDDT_mean_calculation:
  input: 
    tmp_download = 'tmp/download_finished.out',
    fasta_header_to_uniprot = config['input_files']['header_to_uniprot']
  output: 
    'report/protein_structure_pLDDT_mean.tsv'
  threads: 
    config['pLDDT_mean_calculation']['threads']
  conda:
    'envs/pLDDT_mean_calc.yaml'
  script:
    'scripts/2_pLDDT_mean_calculation-multiprocess.py'
    

#############################
# CREATING REPORTS pLDDT DATA
#############################

rule ortho_MCL_modelated_report:
  input: 
    file1 = 'report/protein_structure_pLDDT_mean.tsv',
    file2 = config['input_files']['header_to_uniprot'],
    file3 = config['input_files']['ortholog_group_to_geneID']
    
  output: 
    out = 'report/ortholog_groups_x_sequence_clustering_x_UNIPROT.tsv',
    outstats= 'report/ortholog_groups_structure_stats.tsv'
  conda:
    'envs/pLDDT_mean_calc.yaml'
  script:
    'scripts/3_assigning_structure_to_orthoMCL_group.py'
    
    

####################################
# SELECTED STRUCTURES TO CREATE DB
####################################

rule cluster_representer_protein_structures:
  input: 
    'report/ortholog_groups_x_sequence_clustering_x_UNIPROT.tsv'
  output: 
    touch('tmp/files_copied.done')
  conda:
    'envs/env_nameconverter_and_AFDBdownload.yaml'
  params: 
    path = 'genome_data_sets/query_proteomes/pdb_files/cluster_structure_representers'
  threads: workflow.cores
  script:
    'scripts/4_cluster_representative_protein_structures_selection_to_db.py'




#########################################
# CREATE FASTA FOR NON MODELATED CLUSTERS
#########################################

rule fasta_of_orthoGroups_without_structure_in_AFDB:
  input: 
    original_fasta = 'genome_data_sets/query_proteomes/fasta_files/TriTrypDB-63_All_species_clean.fa',
    report_ortho_g = 'report/ortholog_groups_x_sequence_clustering_x_UNIPROT.tsv',
    ortho_info = '../config/mandatory_files/Ortholog_group_to_geneID.tsv'    
  output:
    output_fasta_file = 'report_files/fasta_files/protein_sequences_from_cluster_wo_structure_in_AFDB.fasta'
  conda:
    'envs/pLDDT_mean_calc.yaml'
  params:
    OG_size = config['fasta_file_of_non_modelated_clusters']['ortholog_group_above_this_num_of_members']
  script:
    'scripts/5_fasta_file_creation.py'




####################################################
#
#
# FOLDSEEK
#
#
####################################################

##############
# CREATING FOLDSEEK DB FOR EACH MODEL ORGANISMS
##############

rule create_separates_DB_for_model_organisms:
  input: 
    'genome_data_sets/subject_proteomes/pdb_files/model_organisms_files/{organisms}.tar'
  output:
    multiext('genome_data_sets/subject_proteomes/foldseek_data_base/individual_org_DB/{organisms}', '', '.dbtype','.index','.lookup','.source','_ca', '_ca.dbtype', '_ca.index','_h','_h.dbtype','_h.index', '_ss', '_ss.dbtype','_ss.index')
  conda:
    'envs/env_foldseek.yaml'
  threads: workflow.cores
  shell:
    'foldseek createdb {input} {output[0]} --threads {threads}'


##############
# CREATING FOLDSEEK DB FOR ALL MODEL ORGANISMS
##############

rule create_single_DB_for_model_organisms:
  input: 
    model_organisms_files
  output:
    multiext('genome_data_sets/subject_proteomes/foldseek_data_base/all_org_DB/all_model_organisms_DB', '', '.dbtype','.index','.lookup','.source','_ca', '_ca.dbtype', '_ca.index','_h','_h.dbtype','_h.index', '_ss', '_ss.dbtype','_ss.index')
  conda:
    'envs/env_foldseek.yaml'
  params: path =  lambda wildcards, input: '/'.join(input[0].split('/')[:-1])
  threads: workflow.cores
  shell: 
    'foldseek createdb {params.path} {output[0]} --threads {threads}'


####################################################################################
# CREATING FOLDSEEK DB FROM DOWNLOADED PROTEIN STRUCTURES - CLUSTER REPRESENTERS
####################################################################################


rule foldseek_db_query_proteins:
  input: 
    'tmp/files_copied.done' #protein_files
  output:
    multiext('genome_data_sets/query_proteomes/foldseek_data_base/DB_cluster_representer', '', '.dbtype','.index','.lookup','.source','_ca', '_ca.dbtype', '_ca.index','_h','_h.dbtype','_h.index', '_ss', '_ss.dbtype','_ss.index')
  conda:
    'envs/env_foldseek.yaml'
  params: path =  'genome_data_sets/query_proteomes/pdb_files/cluster_structure_representers/'
  threads: workflow.cores
  shell:
    'foldseek createdb {params.path} {output[0]} --threads {threads}'


##############################
# RECIPROCAL BEST HIT
##############################


rule foldseek_reciprocal_best_hit:
  input: 
    query = multiext('genome_data_sets/query_proteomes/foldseek_data_base/DB_cluster_representer', '', '.dbtype','.index','.lookup','.source','_ca', '_ca.dbtype', '_ca.index','_h','_h.dbtype','_h.index', '_ss', '_ss.dbtype','_ss.index'), 
    subject = multiext('genome_data_sets/subject_proteomes/foldseek_data_base/individual_org_DB/{organisms}', '', '.dbtype','.index','.lookup','.source','_ca', '_ca.dbtype', '_ca.index','_h','_h.dbtype','_h.index', '_ss', '_ss.dbtype','_ss.index')
  output: 
    #'../results/reciprocal_best_hit/cluster_representer_vs_{organisms}'
    multiext('../results/reciprocal_best_hit/cluster_representer_vs_{organisms}','','.dbtype','.index')
  conda:
    'envs/env_foldseek.yaml'
  threads: workflow.cores
  params:
    sensitivity = config['reciprocal_best_hit_parameters']['sensitivity'],
    cov_mode = config['reciprocal_best_hit_parameters']['cov_mode'],
    coverage = config['reciprocal_best_hit_parameters']['coverage']
  shell:
    'foldseek rbh {input.query[0]} {input.subject[0]} {output[0]} ./tmp --threads {threads} -s {params.sensitivity} -c {params.coverage} -a'
    #'foldseek rbh {input.query[0]} {input.subject[0]} {output[0]} ./tmp --threads {threads} -s {params.sensitivity} -c {params.coverage} -a'


# --format-output query,target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,prob

#rule foldseek_reciprocal_best_hit_compute_TMalign:
#  input: 
#    query = 'genome_data_sets/query_proteomes/foldseek_data_base/DB_cluster_representer', 
#    subject = 'genome_data_sets/subject_proteomes/foldseek_data_base/individual_org_DB/{organisms}.source',
#    result = '../results/reciprocal_best_hit/cluster_representer_vs_{organisms}' 
#  output:
#     '../results/reciprocal_best_hit_TMalign/cluster_representer_vs_{organisms}_TMalign' 
#  conda:
#    'envs/env_foldseek.yaml'
#  threads: 40
#  shell:
#    'foldseek aln2tmscore {input.query} genome_data_sets/subject_proteomes/foldseek_data_base/individual_org_DB/{wildcards.organisms} {input.result} {output}'
    #'foldseek rbh {input.query} genome_data_sets/subject_proteomes/foldseek_data_base/individual_org_DB/{wildcards.organisms} {output} ./tmp --threads {threads} -s {params.sensitivity} -c {params.coverage}'




##############################
# EXTRACT TSV FROM RBH
##############################


rule foldseek_reciprocal_best_hit_extract_result_tsv:
  input: 
    query = multiext('genome_data_sets/query_proteomes/foldseek_data_base/DB_cluster_representer', '', '.dbtype','.index','.lookup','.source','_ca', '_ca.dbtype', '_ca.index','_h','_h.dbtype','_h.index', '_ss', '_ss.dbtype','_ss.index'),
    subject = multiext('genome_data_sets/subject_proteomes/foldseek_data_base/individual_org_DB/{organisms}', '', '.dbtype','.index','.lookup','.source','_ca', '_ca.dbtype', '_ca.index','_h','_h.dbtype','_h.index', '_ss', '_ss.dbtype','_ss.index'),
    table = multiext('../results/reciprocal_best_hit/cluster_representer_vs_{organisms}', '', '.dbtype','.index')
  output:
    '../results/reciprocal_best_hit_TSV/cluster_representer_vs_{organisms}.tsv'  
  conda:
    'envs/env_foldseek.yaml'
  threads: workflow.cores
  shell:
    'foldseek createtsv {input.query[0]} {input.subject[0]} {input.table[0]} {output} --threads {threads}'

    

##############################
# FOLDSEEK SEARCH
##############################


rule foldseek_search_ SwissProt:
  input: 
    query = multiext('genome_data_sets/query_proteomes/foldseek_data_base/DB_cluster_representer', '', '.dbtype','.index','.lookup','.source','_ca', '_ca.dbtype', '_ca.index','_h','_h.dbtype','_h.index', '_ss', '_ss.dbtype','_ss.index'),
    subject = multiext('protein_data_bases/Swiss-Prot', '' ,'.dbtype','.index','.lookup','_ca', '_ca.dbtype', '_ca.index','_h','_h.dbtype','_h.index', '_ss', '_ss.dbtype','_ss.index') #_mapping, _taxonomy, not mandatory
  output:
    multiext('../results/foldseek_search/cluster_representer_vs_SwissProt', '.index', '.dbtype') 
  conda:
    'envs/env_foldseek.yaml'
  threads: workflow.cores
  params:
    sensitivity = config['foldseek_search_against_SwissProt_parameters']['sensitivity'],
    cov_mode = config['foldseek_search_against_SwissProt_parameters']['cov_mode'],
    coverage = config['foldseek_search_against_SwissProt_parameters']['coverage'],
    evalue = config['foldseek_search_against_SwissProt_parameters']['evalue'],
    path =  lambda wildcards, output: output[0][:-6] 
    
  shell:
    'foldseek search {input.query[0]} {input.subject[0]} {params.path} ./tmp --threads {threads} -s {params.sensitivity} -c {params.coverage} -a -e {params.evalue}'
    
    
##############################
# EXTRACT TSV FROM FOLDSEEK SEARCH
##############################
# esto estaria bueno generalizarlo para que se pueda poner otra DB

rule foldseek_search_ SwissProt_extract_result_tsv:
  input: 
    query = multiext('genome_data_sets/query_proteomes/foldseek_data_base/DB_cluster_representer', '', '.dbtype','.index','.lookup','.source','_ca', '_ca.dbtype', '_ca.index','_h','_h.dbtype','_h.index', '_ss', '_ss.dbtype','_ss.index'),
    subject = multiext('protein_data_bases/Swiss-Prot', '' ,'.dbtype','.index','.lookup', '_ca', '_ca.dbtype', '_ca.index','_h','_h.dbtype','_h.index', '_ss', '_ss.dbtype','_ss.index'), #_mapping, _taxonomy, not mandatory
    table =  multiext('../results/foldseek_search/cluster_representer_vs_SwissProt','.index', '.dbtype')
  output:
     '../results/foldseek_search_TSV/cluster_representer_vs_SwissProt.tsv'
  conda:
    'envs/env_foldseek.yaml'
  threads: workflow.cores
  params: path =  lambda wildcards, input: input.table[0][:-6] 
  shell:
    'foldseek createtsv {input.query[0]} {input.subject[0]} {params.path} {output} --threads {threads}'


################################
#
# PROTEOMES ANNOTATION DATA FROM UNIPROT
#
#################################

rule download_proteomes_annotation_info:
  input: 'genome_data_sets/subject_proteomes/pdb_files/model_organisms_files/{UP}_{num}_{spp}_{v}.tar'
  output: 'genome_data_sets/subject_proteomes/annotation_info/{UP}_{num}_{spp}_{v}.tsv'
  shell: 
    'curl -H "Accept: text/plain; format=tsv" "https://rest.uniprot.org/uniprotkb/stream?compressed=true&fields=accession%2Cid%2Cprotein_name%2Cgene_names%2Corganism_name%2Corganism_id%2Cec%2Ccc_function%2Ccc_pathway%2Cgo_p%2Cgo_c%2Cgo%2Cgo_f%2Cgo_id%2Ccc_subcellular_location%2Ccc_domain%2Cft_domain%2Cprotein_families%2Cxref_orthodb%2Cxref_eggnog&format=tsv&query=%28{wildcards.UP}%29" | gzip -c -d > {output}'


rule concat_TSV_in_one_file:
  input: expand('genome_data_sets/subject_proteomes/annotation_info/{organisms}.tsv', organisms = [file[:-4] for file in model_organisms_files_final])
  output: '../results/Gene_annotation_info_from_uniprot_model_spp.tsv'
  run:
    pd.concat([pd.read_csv(file, sep="\t",low_memory=False) for file in input]).to_csv(output[0], sep='\t')
    
################################
#
# DATA BASES ANNOTATION DATA FROM UNIPROT
#
#################################    

rule download_SwissProt_annotation_info:
  input: 'tmp/download_finished.out'
  output: tsv = 'protein_data_bases/annotation_info/Swiss-Prot_annotation_data.tsv'
  shell: 
    'curl -H "Accept: text/plain; format=tsv" "https://rest.uniprot.org/uniprotkb/stream?compressed=true&fields=accession%2Cid%2Cprotein_name%2Cgene_names%2Corganism_name%2Corganism_id%2Cec%2Ccc_function%2Ccc_pathway%2Cgo_p%2Cgo_c%2Cgo%2Cgo_f%2Cgo_id%2Ccc_subcellular_location%2Ccc_domain%2Cft_domain%2Cprotein_families%2Cxref_orthodb%2Cxref_eggnog&format=tsv&query=%28%2A%29%20AND%20%28reviewed%3Atrue%29" | gzip -c -d > {output.tsv}' 







###########################################
#
#
#  TESTING
#
#
###########################################


rule cheking:
  input: table = 'tmp/download_finished.out'
  output: 'tmp/amista.txt'
  params: lambda wildcards, input: input[0][:-4] #: os.path.splitext(output[0])[1]
  shell:
    '''
    echo {params}
    echo {input.table}
    '''
    
    
    
    
    
rule TESTING_foldseek_reciprocal_best_hit:
  input: 
    query = multiext('genome_data_sets/query_proteomes/foldseek_data_base/DB_cluster_representer', '', '.dbtype','.index','.lookup','.source','_ca', '_ca.dbtype', '_ca.index','_h','_h.dbtype','_h.index', '_ss', '_ss.dbtype','_ss.index'), 
    subject = multiext('genome_data_sets/subject_proteomes/foldseek_data_base/individual_org_DB/{organisms}', '', '.dbtype','.index','.lookup','.source','_ca', '_ca.dbtype', '_ca.index','_h','_h.dbtype','_h.index', '_ss', '_ss.dbtype','_ss.index')
  output: 
    #'../results/reciprocal_best_hit/cluster_representer_vs_{organisms}'
    touch('tmp/amista_{organisms}.txt')
  conda:
    'envs/env_foldseek.yaml'
  threads: workflow.cores
  params:
    sensitivity = config['reciprocal_best_hit_parameters']['sensitivity'],
    cov_mode = config['reciprocal_best_hit_parameters']['cov_mode'],
    coverage = config['reciprocal_best_hit_parameters']['coverage']
  shell:
    '''
     echo {input.subject}
     echo {wildcards.organisms}
     '''
     
     
     
     
rule TESTING_foldseek_reciprocal_best_hit_extract_result_tsv:
  input: 
    query = multiext('genome_data_sets/query_proteomes/foldseek_data_base/DB_cluster_representer', '', '.dbtype','.index','.lookup','.source','_ca', '_ca.dbtype', '_ca.index','_h','_h.dbtype','_h.index', '_ss', '_ss.dbtype','_ss.index'),
    subject = multiext('genome_data_sets/subject_proteomes/foldseek_data_base/individual_org_DB/{organisms}', '', '.dbtype','.index','.lookup','.source','_ca', '_ca.dbtype', '_ca.index','_h','_h.dbtype','_h.index', '_ss', '_ss.dbtype','_ss.index'),
    table = multiext('../results/reciprocal_best_hit/cluster_representer_vs_{organisms}', '', '.dbtype','.index')
  output:
    touch('tmp/amistad_{organisms}.tsv')
  conda:
    'envs/env_foldseek.yaml'
  threads: workflow.cores
  shell:
    '''
     echo {input.subject[0]}
     echo {input.table[0]}
     echo {wildcards.organisms}
     '''   
    #'foldseek createtsv {input.query[0]} {input.subject[0]} {input.table[0]} {output} --threads {threads}'